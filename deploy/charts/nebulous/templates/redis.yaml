{{- if or .Values.redis.auth.host .Values.redis.create }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.redis.secret.name }}
  namespace: {{ include "nebulous.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
type: Opaque
data:
  {{ .Values.redis.secret.keys.connectionString }}: {{ printf "redis://%s:%d/%d" (include "redis.host" .) (int .Values.redis.auth.port) (int .Values.redis.auth.database) | b64enc }}
  {{ .Values.redis.secret.keys.password}}: {{ .Values.redis.auth.password | b64enc }}
---
{{- end }}
{{- if .Values.redis.create }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "redis.name" . }}
  namespace: {{ include "nebulous.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "redis.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "redis.name" . }}
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: tailscale
          image: tailscale/tailscale:latest
          env:
            - name: TS_STATE_DIR
              value: /var/lib/tailscale
            - name: TS_USERSPACE
              value: "true"
            - name: TS_AUTH_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.tailscale.secret.name }}
                  key: {{ .Values.tailscale.secret.keys.authKey }}
            - name: TS_EXTRA_ARGS
              value: --login-server {{ include "tailscale.loginServer" . }}
          volumeMounts:
            - name: dev-net-tun
              mountPath: /dev/net/tun
            - name: tailscale-state
              mountPath: /var/lib/tailscale
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
        - name: redis
          image: "redis:{{ .Values.redis.imageTag }}"
          command:
            - /bin/sh
            - -c
          args:
            - |
              exec redis-server --requirepass "$REDIS_PASSWORD"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.secret.name }}
                  key: {{ .Values.redis.secret.keys.password }}
          ports:
            - containerPort: 6379
      volumes:
        - name: dev-net-tun
          hostPath:
            path: /dev/net/tun
            type: CharDevice
        - name: tailscale-state
          {{- if .Values.redis.tailscale.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.redis.tailscale.persistence.claimName }}
          {{- else }}
          emptyDir: { }
          {{- end }}
---
{{- if .Values.redis.tailscale.persistence.createPersistentVolumeClaim }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.redis.tailscale.persistence.claimName }}
  namespace: {{ include "nebulous.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
spec:
  {{- with .Values.redis.tailscale.persistence.storageClassName }}
  storageClassName: {{.}}
  {{- end }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.redis.tailscale.persistence.size }}
---
{{- end }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "redis.serviceName" . }}
  namespace: {{ include "nebulous.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
  {{- with .Values.redis.service.annotations }}
    annotations:
        {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  selector:
    app: {{ include "redis.name" . }}
  ports:
    - protocol: TCP
      port: {{ .Values.redis.auth.port }}
      targetPort: 6379
  type: ClusterIP
{{- end }}
